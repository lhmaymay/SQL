SET hivevar:score_source=test.booking;
SET hivevar:segment=Segment_v1;
SET hivevar:val_start_date="2019-12-24";
SET hivevar:val_end_date="2020-01-06";
WITH score_table AS (
	SELECT
		segment,
		CAST(probabilityscore AS double) AS probabilityscore,
		CAST(fraudflag AS double) AS fraudflag,
		CAST(autokilled AS int) AS autokilled,
		CAST(bookingitempriceusd AS double) AS bookingitempriceusd
	FROM
		${score_source}
	WHERE
		segment = ${segment}
),
-- Break out NAK and Queued transactions
base_score AS (
	SELECT
		*,
  		CASE WHEN autokilled = 0 THEN fraudflag
  			 ELSE NULL
  			 END AS fraudflag_nak
	FROM
		score_table
),
-- Create probability bins
base_with_thresh AS (
  	SELECT
  		*,
		CASE WHEN (probabilityscore NOT BETWEEN 0 AND 1) THEN NULL
			 WHEN (probabilityscore >= 0.95) THEN floor(CAST(probabilityscore AS double)/0.001)*0.001
  			 WHEN (probabilityscore >= 0.1) THEN floor(CAST(probabilityscore AS double)/0.005)*0.005
  			 WHEN (probabilityscore >= 0.001) THEN floor(CAST(probabilityscore AS double)/0.001)*0.001
  			 WHEN (probabilityscore >= 0.0001) THEN floor(CAST(probabilityscore AS double)/0.0001)*0.0001
  			 WHEN (probabilityscore >= 0.00001) THEN floor(CAST(probabilityscore AS double)/0.00001)*0.00001
  			 WHEN (probabilityscore >= 0.000001) THEN floor(CAST(probabilityscore AS double)/0.000001)*0.000001
  			 ELSE floor(CAST(probabilityscore AS double)/0.0000001)*0.0000001
  			 END AS thresh_bin
	FROM
  		base_score
),
thresh_bin_stats AS (
  	SELECT
  		segment,
  		thresh_bin,
		-- Item counts (raw, NAK, and queued)
  		COUNT(*) AS pred_fraud_in_bin,
  		COUNT(fraudflag_nak) AS pred_fraud_in_bin_nak,
		-- Number of true positives
  		SUM(fraudflag) AS fraud_in_bin,
  		SUM(fraudflag_nak) AS fraud_in_bin_nak,
		-- Number of false positives (raw, NAK, and queued)
  		SUM(1 - fraudflag) AS insult_in_bin,
  		SUM(1 - fraudflag_nak) AS insult_in_bin_nak,
		-- Total fraud GBV (raw, NAK and queued)
  		SUM(IF(fraudflag = 1, bookingitempriceusd, null)) AS fraud_gbv_in_bin,
  		SUM(IF(fraudflag_nak = 1, bookingitempriceusd, null)) AS fraud_gbv_in_bin_nak,
		-- Total insults (raw, NAK, and queued)
  		SUM(IF(fraudflag = 0, bookingitempriceusd, null)) AS insult_gbv_in_bin,
  		SUM(IF(fraudflag_nak = 0, bookingitempriceusd, null)) AS insult_gbv_in_bin_nak
	FROM
  		base_with_thresh
  	GROUP BY
  		segment,
  		thresh_bin
),
-- Second to last aggregated stats
thresh_stats AS (
	SELECT
		segment,
		thresh_bin AS threshold,
  		SUM(pred_fraud_in_bin) OVER segment_window AS tot_count,
  		SUM(pred_fraud_in_bin) OVER up_to_threshold AS pred_positives,
		SUM(fraud_in_bin) OVER up_to_threshold AS true_positives,
  		SUM(fraud_in_bin) OVER segment_window AS tot_positives,
		SUM(insult_in_bin) OVER up_to_threshold AS false_positives,
  		SUM(insult_in_bin) OVER segment_window AS tot_negatives
	FROM
		thresh_bin_stats
	WINDOW
		up_to_threshold AS (
			PARTITION BY segment ORDER BY thresh_bin DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
		),
		segment_window AS (
			PARTITION BY segment
		)
),
final_stats AS (
	SELECT
		segment,
		threshold,
		pred_positives/tot_count AS pred_fraud_rate,
		true_positives/tot_positives AS recall,
		false_positives/tot_negatives AS fpr,
		true_positives/pred_positives AS precision
	FROM
		thresh_stats
),
diffs AS (
	SELECT
		segment,
		threshold,
		coalesce(lag(recall) OVER seg_window, 0) AS prev_recall,
		recall,
		coalesce(lag(precision) OVER seg_window, 1) AS prev_precision,
		precision,
		fpr,
		coalesce(lag(fpr) OVER seg_window, 0) AS prev_fpr
	FROM
		final_stats
	WINDOW
		seg_window AS (PARTITION BY segment ORDER BY threshold DESC)
)
SELECT
     segment,
     SUM((recall - prev_recall)*(precision + prev_precision)*0.5) AS pr_auc,
     SUM((fpr - prev_fpr)*(recall + prev_recall)*0.5) AS roc_auc
FROM
     diffs
GROUP BY
     segment
;
